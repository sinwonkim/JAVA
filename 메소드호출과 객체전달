특별한 경우에 메소드를 빠져나가기를 원할 때 
return만 단독으로 써서 메소드를 즉시 빠져나갈 수 있다.
public void say(String nick) {
	if("머랑".equals(nick)) {
		return;
	}
	sysout("나의 별명은 " + nick + "입니다.");
}
입력값으로 nick이란 변수를 받아서 문자열을 출력하는
메소드이다. 
이 메소드 역시 리턴값은 없다. 
문자열을 출력한다는 것과 리턴값이 있다는 것은 
전혀 다른 말이다. 
혼동하지 말도록 하자 , 메소드의 return값은 오로지
return문에 의해서만 생성된다.
이 메소드는 입력값으로 'fool'이라는 값이 들어오면 
문자열을 출력하지 않고 메소드를 빠져나간다. 
이렇게 메소드 수행시 특정 조건에 따라 메소드를 즉시
빠져나가고 싶은 경우 return문을 이용함녀 된다.
(참고 return문만을 써서 메소드를 빠져나가는 이 방법은
리턴자료형이 void형인 메소드에만 해당된다. 

리턴자료형이 명시되어 있는 메소드에서 return문만 
작성하면 컴파일 시 오류가 발생한다.

메소드 내에서 선언된 변수의 효력 범위

메소드안에서 사용하는 변수의 이름을 메소드 밖에서 
사용한 이름과 동일하게 사용한다면 어떻게 될까?

class Test {
	public void vartest(int a) {
		att;
	}
	
	public static void main(String[] args) {
	int a= 1;
	Test  myTest = new Test();
   	myTest.vartest(a);
	System.out.println(a);
	}	
}
vartest 메소드는 입력으로 들어온 int 자료형의 값을 1만큼 
증가시키는 역할을 한다. 

main메소드를 순서대로 분석해보자

먼저main 메소드에서 a라는 자료형의 변수를 생성하고 
1을 대입했따. 그리고 vartest 메소드를 입력값 a를 주어
호출했다. 그다음 a의 값을 출력하게 하였다. 
당연히 vartest 메소드에서 a의 값을 1만큼 증가시켰으니
2가 출력되어야 할것 같지만 프로그램을 실행 시켜보면
1이라는 결과값이 나온다.

그 이유는 메소드내에서 사용되는 변수는 메소드 안에서만
쓰여지는 변수이기 떄문이다. 
즉 public void vartest(int a) {

} 라는 문장에서 입력 인수를 뜻하는 변수 a는 메소드 안에서만
쓰이는 변수이지 메소드 밖의 a가 아니라는 말이다. 

위에서 변수이름을 a로한 vartest메소드는 
다음처럼 변수이름을 b로한 vartest 와 기능적으로 완전히
동일하다.

public void vartest(int b) {
 	b++;
}
즉 메소드에서 쓰이는 변수는 메소드 밖의 변수이름들과
전혀 상관없다. 그래서 이렇게 메소드내에서만 쓰이는
변수를 로컬 변수라고도 말한다. 

*만약 vartest의 입력값이 int 자료형이 아닌 객체였다면
애기가 다르다. 객체를 메소드의 입력으로 넘기고 
메소드가 객체의 속성값(객체 변수 값)을 변경한다면
메소드 수행 이후에도 객체는 변경된 속성값을 유지한다.
이러한 차이가 나는 이유는 메소드에 전달하는 입력 자료형의
형태 떄문인데 메소드에 값을 전달하느냐 아니면
객체를 전달하느냐에 따라 차이가 난다.

그렇다면 vartest라는 메소드를 이용해서 메소드 외부의
a를 1만큼 증가시킬 수 있는 방법은 없을까?

다음과 같이 vartest메소드와 main메소드 변경해보자

public int vartest(int a) {
	a++;
	return a;
}

public static void main(String[] args) {
	int a = 1;
	Test myTest = new Test();
 	a = myTest.vartest(a);
	System.out.println(a);
}
해법은 위 예처럼 vartest메소드에 return문을 이용하는 
방법이다. vartest메소드는 입력으로 들어온 값을 
1만큼 증가시켜 리턴한다. 
따라서 a = myTest.vartest(a) 처럼하면 a의 값은 다시
vartest메소드의 리턴값으로 대입된다. 

객체를 넘기는 방법에 대해서 알아보자.

public class Test {
	
	int a; // 객체변수 a
	
	public void vartest(Test test) {
		test.a++;
	}
	
	public static void main(String[] args) {
		Test myTest = new Test();
		myTest.a = 1;
		myTest.vartest(myTest);
		System.out.println(myTest.a)
	}
}

varTest메소드는 다음과 같이 Test클래스의 객체를 입력받아
해당 객체의 객체변수 a의 값을 1만큼 증가시키는 역할을
하도록 수정했다.
class Test {
int a; // 객체변수
	public void varTest(Test test) {
		test.a++;
	}
}

메소드의 입력항목이 값인지 객체인지를 구별하는 기준은
입력항목의 자료형이 primitive 자료형인지 아닌지에 
따라 나뉜다. int 자료형과 같은 primitive 자료형이 경우
값이 전달되는 것이고 그 이외의 경우 (reference 자료형)는
객체가 전달된다. 




public class test {
	int a; // 객체 변수 

	public void vartest() {
		this.a++;
	}

	public static void main(String[] args) {
	Test myTest = new Test();
	myTest.a = 1;
	myTest.vartest(); // myTest.vartest() 호출
	System.out.println(myTest.a);

	}
}

myTest라는 객체를 이용하여 vartest라는 메소드를 호출할
경우 굳이 myTest라는 객체를 전달할 필요가 없다.
왜냐하면 전달하지 않더라도 vartest 메소드는 this라는 
키워드를 이용하여 객체에 접근할 수 있기 때문이다.
this를 이용하여 vartest메소드를 수정한버전은 다음과 같다

myTest 라는 객체를이용하여 vartest 메소드를 호출할 경우
굳이 myTest라는 객체를 전달할 필요가 없다.
왜냐하면 전달하지 않더라도 vartest메소드는
this키워드를 이용하여 객체에 접근할 수 있기 떄문이다.
