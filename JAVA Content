자바는 C언어에 객체 지향적 기능을 추가하여 만든 C++과는 달리, 처음부터 객체 지향 언어로 개발된 프로그래밍 언어
자바는 가상 머신(JVM,Java Virtual Machine)을 사용하여,운영체제와는 독립적으로 동작할 수 있다.
따라서 자바는 어느 운영체제에서나 같은 형태로 실행될 수 있다.

자바 컴파일러 

자바 컴파일러는 자바를 가지고 작성한 자바 소스 코드를 자바 가상 머신이 이해할 수 있는 자바 바이트 코드로 변환함
자바 컴파일러는 자바를 설치하면 javac.exe라는 실행 파일 형태로 설치됨

자바 컴파일러에 의해 변환된 자바 바이트 코드를 읽고 해석하는 역할을 하는 것이 자바 인터 프리터 

자바는 동적으로 클래스를 읽어 오므로, 프로그램이 실행중인 런타임에서야 모든 코드가 자바 가상 머신과 연결됨
이렇게 동적으로 클래스를 로딩해주는 역할을 하는 것이 클래스 로더 


자바 바이트 코드 

자바 바이트코드란 자바 가상머신이 이해할 수 있는 언어로 변환된 자바 소스 코드를 의미
자바 컴파일러에 의해 변환되는 코드의 명령어 크기가 1바이트라서 자바 바이트 코드라고 불리고 있음
이러한 자바 바이트 코드의 확장자는 .class
자바 바이트 코드는 자바 가상 머신만 설치되어 있으면,어떤 운영체제에서라도 실행 될 수 있다.

자바가 가상머신 JVM

자바 가상 머신이란 자바 바이트 코드를 실행시키기 위한 가상의 기계라고 할 수 있다.
자바로 작성된 모든 프로그램은 자바 가상 머신에서만 실행될 수 있으므로, 자바 프로그램을 실행하기 위해서는 반드시 자바 가상 머신이
설치되어 있어야 한다.

단,자바 프로그램과는 달리 자바 가상 머신jvm은 운영체제에 종속적이므로,각 운영체제에 맞는 자바 가상 머신을 설치해야함


자바 프로그램은 한 개 이상의 클래스로 구성됨
이러한 클래스는 한 개 이상의 필드나 메소드로 구성됨

ex)
class 클래스명 {
  int field1;
  String field2;
  
  public void method1() {
    System.out.println("자바 프로그래밍");
  }

}


main()메소드
자바 프로그램이 실행되면 맨 먼저 main()메소드를 찾아 그 안의 모든 명령문을 차례대로 실행함
따라서 하나의 자바 프로그램에는 main()메소드를 가지는 클래스가 반드시 하나는 존재함

자바에서 main()메소드는 다음과 같이 선언함 

원형
public static void main(String[] args) {


}
위의 원형처럼 main()메소드는 반드시 public static void로 선언되어야 함

자바 클래스파일 *.java에 public class가 존재하면 소스 파일의 이름은 반드시해당 public 클래스의 이름과 같아야 한다.
이러한 public 클래스는 자바 클래스 파일마다 단 한개만 가질 수 있다.

명령문 statement
자바프로그램의 동작을 명시하고, 이러한 동작을 컴퓨터에 알려주는 데 사용되는 문장을 명령문이라고 한다.
자바의 모든 명령문은 반드시 세미콜론; 으로 끝나야 한다.

자바 표준 입출력 클래스
사용자가 프로그램과 대화하기 위해서는 사용자와 프로그램 사이의 입출력을 담당하는 수단이 필요하다
자바에서는 모든 것이 객체로 표현되므로,입출력을 담당하는 수단 또한 모두 객체 

C언어의 printf()함수나 scanf()함수처럼 자바에서는 System이라는 표준 입출력 클래스를 정의하여 제공함
이러한 System클래스는 java.lang패키지에 포함되어 제공됨
자바에서는 System.in 스트림을 사용하여 표준 입력 작업을 수행함
또한, System.out 스트림이나 System.err 스트림을 사용하여 표준 출력 작업을 수행함

System.out.println()메소드를 사용하면 모니터에 전달된 데이터를 출력한 후에 줄 바꿈까지 해줌  






