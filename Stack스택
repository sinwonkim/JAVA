모든 자료구조는 
[삽입],[삭제],[읽기]를 기본으로 가진다. 


우리가 많이 사용하는 브라우저를 생각해보면 , 인터넷 서핑을 하다가 뒤로가고 싶을 떄, 뒤로가기 버튼을 사용한다.
'뒤로가기'버튼이 바로 스택으로 구현된 메소드중 하나이다. 
앞서 스택은 밑이 막힌 상자라고 하였다. 제일 마지막에 봤던 페이지는 가장 위에 쌓이겠지 
상자에 들어있는 물건을 뺴는 것이 '뒤로가기'이다. 따라서 '뒤로가기'버튼을 누르면 지금 보고 있는 페이지(스택의 최상위)가 빠져나가면서,
이전에 봤던 페이지가 보여지게 된다. '뒤로가기'버튼은 스택의 구조로 구성되어 있다.

1)삽입 (Push) : 물건을 집어 넣는것을 push라 한다. push는 스택의 구조상 마지막 데이터 위치에 삽입이 된다. 나중에 코딩 할 떄 , 마지막 데이터 위치를
                기억하기 위해 top라는 변수를 만든다. 삽입을 한다면 top은 +1
                
2)삭제 (Pop) : 마지막 데이터 위치에서 삭제가 됨  Pop을 하게 된다면 top의 위치는 -1이 된다. 

3)읽기(peek) : 마지막 위치에 해당하는 데이터를 읽는다. 이 떄 , top의 변화는 없다. 

스택의 구현 방법은 배열을 사용하는 것과 연결 리스트를 사용하는 것 두가지가 있다. 스택은 밑이 막힌 상자라 표현, 이 상자를 배열로 구현할 것인가,
아니면 연결 리스트를 사용하여 구현할 것인가 이다. 
배열의 장점은 구현이 쉽고, 원하는 데이터의 접근 속도가 빠르다. 만약 내가 원하는 데이터가 배열의 3번쨰 위치에 있으면 arr[2]를 사용한다면 한번에 접근이
가능하기 떄문이다. 하지만 단점으로는 데이터 최대 개수를 미리 정해야 한다. 
또한 데이터의 삽입과 삭제에 있어 매우 비효율적이다. 

ex)두 번째 위치에 x라는 데이터를 삽입하려고 하면 2,3,4,5,6 데이터들은 모두 한칸씩 옮겨야 한다  why? 두번쨰 칸에 x를 삽입하려고 하니깐 
만약 이동시켜야할 데이터가 1,000,000,000 이런식이라면 모든 데이터를 1,000,000,000 옮겨야 하므로 이것은 시간적으로나 비용적으로나 엄청난 손해이다.

                            List.Insert() time complexity
original array    1 2 3 4 5 6 ㅁ ㅁ
                            List.Insert(1,"x")
array after the insertion  1 x 2 3 4 5 6

연결 리스트의 장점으로는 데이터의 최대 개수가 한정되어 있찌 않고, 데이터의 삽입 삭제가 용이하다. 연결리스트의 구조는 배열과 다르게 데이터들이 순차적으로
나열되어 있지 않는다. 
그래서 이러한 구조 떄문에 연결리스트 중간에 데이터를 삽입하는 방법은 쉽다. 다음 위치에 해당하는 노드의 주소값만 바꿔주면 되서 하지만 치명적인
단점은 배열과 다르게 한번에 원하는 데이터의 접근이 불가능하다. 
연결되어 있는 링크를 따라 차근차근 하나씩 확인하며 데이터를 찾아야 하기 떄문이다. 

배열은 데이터 양이 많지만 삽입/삭제가 거의 없고,데이터의 접근이 빈번히 이뤄질 떄 유리 
반대로 연결리스트는 삽입/삭제가 번번히 이뤄지고,데이터의 접근이 거의 없을 떄 유리
