인터페이스란

자식 클래스가 여러 부모 클래스를 상속받을 수 있다면, 다양한 동작을 수행할 수 있다는 장점을 가지게 될 것이다.
하지만 클래스를 이용하여 다중 상속을 할 경우 메소드 출처의 모호성 등 여러가지 문제가 발생할 수 있어 자바에서는 클래스를 통한 다중 상속은 
지원하지x

하지만 다중 상속의 이점을 버릴 수 없기에 자바에서는 인터페이스라는 것을 통해 다중 상속을 지원하고 있다.
인터페이스란 다른 클래스를 작성할 때 기본이 되는 틀을 제공하면서, 다른 클래스 사이의 중간 매개 역할까지 담당하는 일종의 추상 클래스를 의미

자바에서 추상 클래스는 추상 메소드뿐만 아니라 생성자,필드,일반 메소드도 포함할 수 있다.
하지만 인터페이스는 오로지 추상 메소드와 상수만을 포함할 수 있다.

인터페이스의 선언
자바에서 인터페이스를 선언하는 방법은 클래스를 작성하는 방법과 같다.
인터페이스를 선언할 떄에는 접근 제어자와 함께 interface키워드를 사용하면 된다.

자바에서 인터페이스는 다음과 같이 선언한다.
ex)
접근제어자 interface 인터페이스 이름{
  public static final 타입 상수이름 = 값;
  
  public abstract 메소드 이름(매개변수목록);

}
클래스와는 달리 인터페이스 모든 필드는 public static final이어야 하며, 모든 메소드는 public abstract이어야 한다.


인터페이스 구현
인터페이스는 추상 클래스와 마찬가지로 자신이 직접 인스턴스는 생성할 수는 x
따라서 인터페이스가 포함하고 있는 추상 메소드를 구현해 줄 클래스를 작성해야만 한다.
자바에서는 인터페이스는 다음과 같은 문법을 통해 구현해야 한다.

문법

class 클래스이름 implements 인터페이스이름{}

만약 모든 추상 메소드를 구현하지 않는다면, abstract 키워드를 사용하여 추상 클래스로 선언해야 한다.
ex)
interface Animal {
  public abstract void cry();
}

자바에서는 다음과 같이 상속과 구현을 동시에 할 수 있습니다.

문법
class 클래스이름 extend 상위클래스이름 implements 인터페이스이름 { ... }

인터페이스의 장점
인터페이스를 사용하면 다중 상속이 가능할 뿐만 아니라 다음과 같은 장점을 가질 수 있습니다.

1. 대규모 프로젝트 개발 시 일관되고 정형화된 개발을 위한 표준화가 가능
2. 클래스의 작성과 인터페이스의 구현을 동시에 진행할 수 있으므로, 개발 시간을 단축
3. 클래스와 클래스 간의 관계를 인터페이스로 연결하면, 클래스마다 독립적인 프로그래밍이 가능




이 내용은 tcp 스쿨을 보고 개인적으로 정리하려고 적은 내용입니다.
