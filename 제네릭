제네릭이란 
자바에서 제네릭이란 데이터의 타입을 일반화한다라는 것을 의미
제네릭은 클래스나 메소드에서 사용할 내부 데이터 탑입을 컴파일 시에 미리 지정하는 방법 
이렇게 컴파일 시에 미리 타입 검사를 수행하면 다음과 같은 장점 가짐 

1.클래스나 메소드 내부에서 사용되는 객체의 타입 안정성을 높일 수 있다.
2.반환값에 대한 타입 벼환 및 타입 검사에 들어가는 노력을 줄일 수 있다.

제네릭의 선언 및 생성
자바에서 제네릭은 클래스와 메소드에만 다음과 같은 방법으로 선언할 수 있다.

ex)
class MyArray<T> {
  T element;
  
  void setElement(T element){
   this.element = element;
   }
   
  T getElement() { 
  return element;
  }
}

위의 예제에서 사용된 'T'를 타입 변수(type variable)라고 하며, 임의의 참조형 타입을 의미
위와 같이 선언된 제네릭 클래스를 생성할 떄에는 타입 변수 자리에 사용할 실제 타입을 명시해야 함
ex)
MyArray<Integer> myArr  = new MyArray<Integer>();

위의 예제는 MyArray 클래스에서 사용된 타입 변수로 Integer 타입을 사용하는 예제
위처럼 제네릭 클래스를 생성할 때 사용할 실제 타입을 명시하면,내부적으로는 정의된 타입 변수가 명시된 실제 타입으로 변환되어 처리됨

자바에서는 타입 변수 자리에 사용할 실제 타입을 명시할 떄 기본 타입을 바로 사용할 수는 없다.
이때는 위 예제의 Integer와 같이 래퍼(wrapper)클래스를 사용해야만 한다.

또한 자바 SE7 부터 인스턴스 생성시 타입을 추정할 수 있는 경우에는 타입을 생략할 수 있다.
ex)
MyArray<Integer> myArr = new MyArray<>();

import java.util.*;








