배열에 저장된 요소를 대상으로 연산, 참조 또는 탐색을 진행하는 경우를 흔히 접할 수 있다.

"배열에 저장된 값중에서 특정 조건에 해당하는 값을 찾아라"

int[] arr = {1,2,3,4,5,6};
for(int i = 0 ; i<arr.length; i++) {
  System.out.println(arr[i]);
}

enhanced for문 
for(요소 : 배열) {
  반복할 문장들
}

ex)
package enhancedFor;

public class EnhancedFor {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] ar = {1,2,3,4,5};
		for(int e : ar) {
			System.out.println(e);
		}
	}
}

for(int e : ar) {
  e = ar[0] // 첫 번쨰 요소가 변수  e에 담겨 아래 문장을 실행 
  System.out.println(e);
}


확실히 enhanced for문은 코드의 양이 절대적으로 줄어든다. 
반복문 구성 과정에서 배열의 길이 정보를 직접 확인하고 입력할 필요가 없다.

