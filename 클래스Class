인스턴스(instance)

자바에서 클래스를 사용하기 위해서는 우선 해당 클래스 
타입의 객체(object)를 선언해야 함 

// 이렇게 클래스로부터 객체를 선언하는 과정을 클래스의
인스턴스 화라고 한다.
또한, 이렇게 선언된 해당 클래스 타입의 객체를 인스턴스라고 한다.
인스턴스란 메모리에 할당된 객체를 의미

자바에서는 하나의 클래스로부터 여러개의 인스턴스를 생성할 수 있다.
이렇게 생성된 인스턴스는 독립된 메모리 공간에 저장된 자신만의 
필드를 가질 수 있다.
해당 클래스의 모든 메소드는 해당 클래스에서 생성된 모든 인스턴스가
공유하게 됨
Car car =  new Car();

자바에서 메소드를 정의하는 방법은 다음과 같다.

접근제어자 반환타입 메소드이름(매개변수목록) { 	// 선언부
	// 구현부
}
1.접근 제어자: 해당 메소드에 접근할 수 있는 범위를 명시함
2.반환타입(return type): 메소드가 모든 작업을 마치고 반환하는 데이터의 타입을 명시함
3.메소드 이름:메소드를 호출하기 위한 이름을 명시함
4.매개변수 목록(parameters):메소드 호출 시에 전달되는 인수의 값을 저장할 변수들을 명시함
5.구현부:메소드의 고유 기능을 수행하는 명령문의 집합

자바에서는 하나의 클래스에 같은 이름의 메소드를 둘 이상 정의할 수 없다.
But 메소드 오버로딩을 이용하면, 같은 이름의 메소드를 중복하여 정의할 수 있다.
메소드 오버로딩이란 매개변수의 개수나 타입을 다르게 하여 같은 이름의 또 다른 메소드를 작성하는 것이다.

이러한 메소드 오버로딩을 사용함으로써 메소드에 사용되는 이름을 절약할 수 있다.
또한,메소드를 호출할 때 전달해야 할 매개변수의 타입이나 개수에 대해 크게 신경을 쓰지 않고 
호출할 수 있게 된다.

출처: http://tcpschool.com/


자바에서는 객체를 New 연산자로 선언하고 생성한다.
public static void main(String[] args) {
	Class 타입 변수명 = new Class();
	변수명.age = 3;
	변수명.classLevel = 6;
	변수명.number = 17;
}


new Class(); 익명함수

class Student {
	int age;
	int number;
	int classLevel;
}

객체 생성 과정 
1.new 연산자가 s객체에 저장될 메모리 공간 할당
2.생성자가 s객체를 초기화
3.new 연산자가 새로 생성된 객체의 주소(referenece) 변수에 저장
4.변수를 통해 접근 

객체란?
객체(Ojbect)는 상태(변수)와 동작(메소드로 표현)을 가지고 있다.
객체의 상태(state)는 객체의 특징값(속성)이다.
객체의 동작(behavior)또는 행동은 객체가 취할 수 있는 동작

클래스 
클래스Class:객체를 만드는 설계도
클래스로부터 만들어지는 각각의 객체를 그 클래스의 인스턴스라고 한다.

도면=클래스 -> 제품 =객체
class    		object


객체는 클래스라는 설계도로 생성된다.

ex)

package classEx;

import java.util.Scanner;

public class ClassStudy {
	static int currentSpeedM;
	
	public static void main(String[] args) {
		CarClass carclass = new CarClass(); // CarClass 클래스를 new연산자 사용해서 객체를 만들고 있다.
			 
		 currentSpeedM = carclass.speedUp();
		 currentSpeedM = carclass.speedDown();
		 
		System.out.println("현재 속도는 "+currentSpeedM+"km/h 입니다.");
	
	}
}

// 설계도 역할을 하는 클래스    난 자동차 클래스를 만들어 거기에 속성 값으로 currentSpeed 선언 , 행동으론 스피드 up,down 메소드를 만들어 사용 
class CarClass{
	 
	int currentSpeed; // 현재속도
	
	// 속도 증가시키는 동작
	public int speedUp() {
		Scanner scanner = new Scanner(System.in);
		System.out.println("증가할 속도를 입력하세요");
		int a = scanner.nextInt();		
		currentSpeed += a;		
		return currentSpeed;
	}
	
	public int speedDown() {
		Scanner scanner = new Scanner(System.in);
		System.out.println("감속할 속도를 입력하세요");
		int a = scanner.nextInt();
		currentSpeed -= a;
		return currentSpeed;
	}
}

