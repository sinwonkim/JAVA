package chapter6;

public class ClassOfMember {
	//필드
	int fieldName;
	
	// 생성자
	ClassOfMember( ){
		
	}
	// 메소드
	public void eat() {System.out.println("Hello i'm method");}
	
	public static void main(String[] args) {
		ClassOfMember classOf= new ClassOfMember();
		classOf.eat();
		// TODO Auto-generated method stub
		// 클래스에는 객체가 가져야 할 구성 멤버가 선언된다. 구성 멤버에는 필드, 생성자, 메소드가 있다.  구성 멤버들은 생략 되거나 복수 가능 
		
		//필드 - 객체의 고유 데이터, 부품 객체, 상태 정보를 저장하는 곳이다. 선언 형태는 변수(variable)과 비슷하지만 필드를 변수라고 부르지 않는다. 
		//메소드 - 객체의 동작에 해당하는 중괄호 블록을 말한다.
		//메소드 호출하게 되면 중괄호 블록에 있는 모든 코드들이 일괄적으로 실행된다. 메소드는 필드를 읽고 수정하는 역할도 하지만, 다른 객체를 생성해서 
		//다양한 기능을 수행하기도 한다. 메소드는 객체간의 데이터 전달의 수단으로 사용된다. 외부로부터 매개값을 받을 수도 있고, 실행 후 어떤값을 리턴할 수도 있다.
		// 생성자와 메소드 중괄호 블록 내부에 선언된 것은 모두 로컬 변수가 된다. 
		// 타입은 필드에 저장할 데이터의 종류를 결정한다 .타입에는 기본타입(byte, short, int, long, float, double, boolean)과 참조타입(배열, 클래스, 인터페이스)
		// 모두 올 수 있다. 필드의 초기값은 필드 선언 시 주어질 수도 있고, 생략될 수도 있다. 
		
		//변수와 필드의 차이점 변수는 자신이 선언된 생성자 메소드 블록 내부에서만 사용할 수 있는 반면 필드는 생성자 메소드 외부 클래스에서 해당 필드를 가지고 있는 클래스  객체를 생성하고 사용 가능하다.
		
		
		// 생성자는 new 연산자와 같이 사용되어 클래스로부터 객체를 생성할때 호출되어 객체의 초기화를 담당한다. new 연산자에 의해 생성자가 성공적으로 실행되면 힙 영역에 객체가 생성되고
		// 객체의 주소가 리턴된다. 리턴된 객체의 주소는 클래스 타입 변수에 저장되어 객체에 접근할 떄 이용된다. 만약 생성자가 성공저긍로 실행되지 않고 예외가 발생했다면 객체는 생성되지 않는다. 
		
		// 매개변수는 new 연산자로 생성자를 호출할때 외부의 값을 생성자 블록 내부로 전달하는 역할을 한다. 
	}

}
