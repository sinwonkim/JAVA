
package commEx;

public class ExamMethod1 {
	
	public static void callByName() {
		System.out.println("callByName 메서드 : 메서드의 이름으로 호출하는 메서드");
	}
	
	// 메소드 오버로딩 메소드이름 동일하게 사용 가능함 
	// 단 파라미터 타입 or 파라미터갯수 달라야 한다.
	public static void callByName(String name) {
		System.out.println("'" + name +"'"+"was coalled");
	}
	
	
	public static int callByName(int a , int b) { // CallByValue
		return a + b;							// CallByName과 다르게 매개변수를 통하여 값을 전달하고 그 값을 메서드에서 이용할 수 있는 호출 방식이다. 
	}											// 이떄 중요하게 생각해야 할 점은 전달한 매개변수의 Data가 어디까지 생존해 있느냐 이다. 
	
	
	
	/* return은 정말 너무 중요한 개념이다. 메서드 안에서 실행되는 내용은 메서드가 끝나는 즉시 사라지기 떄문에 (메서드 안에서 생성된 변수들이라면)
	 * 필요한 결과를 return 받아 메서드를 호출한 곳에서  사용해야 할 필요가 있다. 그떄 return을 써야하며, return되는 타입은 메서드를 생성할 떄 정의해줘야 한다. 
	 */
	
	public static int getNumber(int a, int b) {
		int d = a+b;
		int c = d*2;
		return c;
	}
	
	public static void main(String[] args) {
		
		// 메서드란?
		// 자주 반복되어 사용되는 내용을 묶어서 특정이름으로 정의한 묶음
		// 형식 
		// 메서드명(매개변수) throws 예외 클래스{내용정의;} 
		
		// 메서드의 종류 
		
		//call By Name - 메서드의 이름으로 호출하는 메서드. 특정매개변수 없음
		
		callByName();
		callByName("호");
		 int c = callByName(1,3);
		 System.out.println("C : "+c);
		 
		 // CallByValue 
		 // CallByName과 다르게 매개변수를 통하여 값을 전달하고 그 값을 메서드에서 이용할 수 있는 호출방식이다. 이때 중요하게 생각해야 할 점은 전달한 매개변수의 Data가 어디까지 
		 // 생존해 있느냐 이다. 전달된 매개변수의 data는 호출된 메서드안에서만 이용되고 없어진다. 
		 
		 int a = 10;
		 int b = 20;
		 int result = getNumber(a,b);
		 System.out.println("a : "+a+" b : " + b);
		 System.out.println("result : " + result);
		 

	}
	


}


























자바는 클래스를 떠나 존재하는 것은 자바의 함수는 보통 따로 존재x
클래스 내에 존재 자바는 이 클래스 내의 함수를 메소드라고 부름 

자바에서 함수의 명칭은 메소드이다.

입력을 가지고 어떤 일을 수행한 다음에 결과물을 내놓는것 이것이 메소드가 하는 일이다.

메소드를 사용하는 이유~? 

프로그래밍을 하다보면 똑같은 내용을 반복해서 적고 있는 것을 발견함  이 때가 메소드가 필요한 떄이다.
여러번 반복해서 사용된다는 것은 언제고 또다시 사용할 만한 가치가 있는 부분이라는 뜻이다.

이러한 경우 이것을 한 뭉치에 묶어서  어떤 입력값을 주었을 떄 어떤 리턴값을 돌려준다 라는 식의 메소드를 작성하는 것이 현명한 일일 것이다.
public class Test{
public int addMethod(int a, int b) {
  return a+b;
}
}

public static void main(String[] args) {
Test test = new Test();
 int sum = test.addMethod(3,4);
  
System.out.println(sum);
}
result 
7

## 메소드의 구조 

public 리턴자료형 메소드명(입력자료형1 입력변수1, 입력자료형 2 입력변수2){

	return 리턴값; // 리턴 자료형이 void인 경우에는 return 문이 필요 없다.
}

리턴값이 없는 메소드는 명시적으로 리턴타입 부분에 void라고 표기한다. 
리턴값이 없는 메소드는 돌려주는 값이 없기 때문에 

Test  test = new Test();
test.sum(3,4);  // test객체에 sum이라는 메소드가 있음 

즉,리턴값이 없는 메소드는 
객체.메소드명(입력인수1,입력인수2);

return의 또 다른 쓰임새 
특별한 경우에 메소드를 빠져나가기를 원할 때 return만 
단독으로 써서 메소드를 즉시 빠져나갈 수 있다. 

public void getAaway(string apple) {
	if("fool".equals(apple)) { 
		return;
	}
	System.out.println("내 핸드폰은"+apple+" 입니다.");
}
위의 메소드는 입력값으로 apple이란 변수를 받아서 문자열 출력하는 메소드 
이메소드는 입력값으로 'fool'이라는 값이 들어오면 문자열을 출력하지 않고 
메소드를 즉시 빠져나간다. 
이렇게 메소드 수행 시 특정조건에 따라 메소드를 빠져나가고 싶은 경우 
return문을 이용하면 된다. 

public void leageOflegend(String Characters){
	if("vein".equals(Characters)) {
		return;
	}
	System.out.println("내 케릭터는"+Characters+"입니다.") ;
}




